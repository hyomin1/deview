export const PAGE = 6;

export const exampleAnswer = `
### 개념 정의
- **useState**는 React의 훅 중 하나로, 함수형 컴포넌트에서 상태를 관리하기 위해 사용됩니다. 
- 이 훅을 통해 컴포넌트가 가지고 있는 상태 값을 선언하고, 해당 상태를 업데이트할 수 있는 함수를 제공합니다. 
- 클래스형 컴포넌트에서 state를 관리하는 것과 유사하지만, 더 간결하고 직관적으로 작성할 수 있습니다. 
- 예를 들어, 사용자 입력을 반영하는 버튼 클릭 카운터와 같은 애플리케이션에서 유용하게 활용됩니다.

### 동작 원리
- useState는 두 가지 요소를 반환합니다: 현재 상태 값과 해당 상태를 업데이트하는 함수입니다.
1. \`const [count, setCount] = useState(0);\`와 같이 초기값을 설정하면 count는 현재 상태 값을 나타내고 setCount는 이를 업데이트 하는 함수입니다.
2. setCount를 호출하면 React는 해당 컴포넌트를 다시 렌더링하며 새로운 state 값으로 UI를 갱신합니다.
3. 내부적으로 React는 각 상태 값에 대한 변화를 추적하여 필요한 경우에만 리렌더링을 수행합니다.
4. 예시 시나리오는 버튼 클릭 시 카운트를 증가시키는 것입니다.

### 주요 특징
- **간편한 API**: 비슷한 기능을 제공하는 클래스형 컴포넌트 대비 짧고 간단한 코드로 작성할 수 있습니다.
- **상태 분리**: 여러 개의 useState 훅을 사용할 수 있어 각기 다른 상태를 독립적으로 관리할 수 있습니다.
- **비동기적 업데이트**: setCount() 호출 후 즉시 count 값을 확인하면 이전 값을 반환하므로 주의해야 합니다.
   - 장점: 비동기적 처리로 성능 향상 가능
   - 단점: 연속적인 상태 변경 시 최신 값 보장하지 않음

### 기본 문법과 사용법
\`\`\`javascript
import React, { useState } from 'react';

function Counter() {
    const [count, setCount] = useState(0);
    
    return (
        <div>
            <p>현재 카운트: {count}</p>
            <button onClick={() => setCount(count + 1)}>증가</button>
        </div>
    );
}
\`\`\`
- 위 코드에서 \`useState\`로 초기값을 설정하고 버튼 클릭 시 \`setCount\` 함수를 통해 값을 증가시킵니다. 
- 이와 같은 방식으로 다양한 형태의 상태 관리를 할 수 있습니다.

### 성능 고려사항
- **불필요한 리렌더링 방지**: 동일한 state가 반복적으로 업데이트되는 상황에서는 불필요한 렌더링이 발생할 수 있으므로 최적화 전략이 필요합니다.
- **배치 업데이트 활용**: 여러 개의 state 업데이트가 필요한 경우 한 번에 처리하도록 배치하여 성능을 개선할 수 있습니다.
- **메모이제이션 사용**: 특정 조건 하에 리렌더링을 방지하기 위해 \`useMemo\` 또는 \`useCallback\`과 함께 사용하는 것이 좋습니다.
`;
